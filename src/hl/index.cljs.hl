;; Copyright (c) Alan Dipert and Micha Niskin. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(page "index.html"
      (:require
        [clojure.string :as str]
        [demo.state.chat :as c]))

(def register?        (cell nil))
(def reg-link-text    (cell= (if register? "log in" "register")))
(def toggle-register! #(swap! register? not))
(def log-reg!         #(if @register? (c/register! %1 %2 %3) (c/login! %1 %2)))

(c/init)

(html
  (head
    (title "chat app")
    (link :rel "stylesheet" :type "text/css" :href "main.css"))
  (body
    (div
      :id "error"
      :click c/clear-error!
      :slide-toggle c/error
      :css {:display "none"}
      (text "~{c/error-message}"))

    (div
      :id "loading"
      :fade-toggle c/loading?
      :css {:display "none"}
      "loading...")

    (div {:id "content"}
         (div
           :id "login-pane"
           :css {:display "none"}
           :toggle c/show-login?
           (let [user (cell "")
                 pass (cell "")
                 pass2 (cell "")]
             (form
               :submit #(log-reg! @user @pass @pass2)
               (div
                 (label "Username")
                 (input :type "text" :autofocus "autofocus" :value user :change #(reset! user @%)))

               (div
                 (label "Password")
                 (input :type "password" :value pass :change #(reset! pass @%)))

               (div :toggle register?
                    (label "Confirm")
                    (input :type "password" :value pass2 :change #(reset! pass2 @%)))

               (button :type "submit" "submit")

               (a :href "javascript:void(0)" :click toggle-register!
                  (text "~{reg-link-text}")))))

         (div
           :id "chat-pane"
           :css {:display "none"}
           :toggle c/show-chat?
           (h1 (text "hello, ~{c/user}!"))

           (div :id "buddies"
                (h4 "buddies")

                (ul
                  (loop-tpl :bindings [buddy c/buddies]
                            (li :toggle (cell= (not (or (str/blank? buddy) (= c/user buddy))))
                                (span :class "buddy" (text "~{buddy}"))

                                (input
                                  :type "checkbox"
                                  :value (cell= (contains? c/active-chat buddy))
                                  :click #(c/toggle-chat! buddy)))))

                (h4 "chats")

                (ul
                  (loop-tpl :bindings [[conv conv-str] c/loop-convs]
                            (li :toggle (cell= (not (str/blank? conv-str)))
                                (a
                                  :href "javascript:void(0)"
                                  :class (cell= {:active (= c/active-chat conv)})
                                  :click #(c/switch-chat! conv)
                                  (text "~{conv-str}"))))))

           (div :id "chat"
                (div :id "convo"
                     (ul
                       (loop-tpl :bindings [{from :from msg-text :text} c/msgs]
                                 (li :toggle (cell= (not (str/blank? from)))
                                     (span :class "from" (text "~{from}"))
                                     (span (text ": ~{msg-text}")))))

                     (let [chat-message (cell "")]
                       (form
                         :submit #(do (c/send-message! @chat-message)
                                      (reset! chat-message "")
                                      (.preventDefault %))
                         (label (text "~{c/user} >"))
                         (input
                           :type "text"
                           :toggle (cell= (< 0 (count (disj c/active-chat c/user))))
                           :value chat-message
                           :change #(reset! chat-message @%)
                           :focus c/active-chat)))))))))
